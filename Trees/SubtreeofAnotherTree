# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def isSubtree(self, root: Optional[TreeNode], subRoot: Optional[TreeNode]) -> bool:
        """
        first find the root.val = subroot.val and run isSameTree algo
        we assume that it is false, that the subroot doesn't exist in root
        subroot cannot be none because num nodes is 1 for subroot at least
        """
        if root == None:
            return False
        else:
            if root.val == subRoot.val:
                bool_val = self.isSameTree(root, subRoot)
                if bool_val == True:
                    return True
            left_bool = self.isSubtree(root.left, subRoot)
            if left_bool == True:
                return True
            else:
                return self.isSubtree(root.right, subRoot)
        


    def isSameTree(self, p: TreeNode, q: TreeNode) -> bool:

        """
        code reuse except i got this from neetcode who have some good solutions going on. 
        """
        if not p and not q:
            return True
        if p and q and p.val == q.val:
            return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)
        else:
            return False