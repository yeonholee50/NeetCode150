# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def isSubtree(self, root: Optional[TreeNode], subRoot: Optional[TreeNode]) -> bool:
        if root is None and subRoot is None:
            return True
        elif root is None and subRoot is not None:
            return False
        elif root is not None and subRoot is None:
            return True
        else:
            if root.val == subRoot.val and self.isSameTree(root, subRoot):
                return True
            else:
                if self.isSubtree(root.left, subRoot) or self.isSubtree(root.right, subRoot):
                    return True
                else:
                    return False


    def isSameTree(self, p: Optional[TreeNode], q: Optional[TreeNode]) -> bool:
        if p is None and q is not None:
            return False
        elif p is not None and q is None:
            return False
        elif p is None and q is None:
            return True
        else:
            if self.isSameTree(p.left, q.left) is False:
                return False
            elif self.isSameTree(p.right, q.right) is False:
                return False
            else:
                return p.val == q.val